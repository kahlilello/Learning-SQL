--HackerRank SQL

/* Prep

  -- Revising the Select Query I
      SELECT *
        FROM CITY
        WHERE CountryCode = 'USA'
            AND population > 100000

  -- Query all columns (attributes) for every row in the CITY table.
      SELECT *
          FROM CITY;

  -- Query all columns for a city in CITY with the ID 1661. The CITY table is described as follows:
      SELECT *
        FROM CITY 
        WHERE ID = 1661;

  -- Query the NAME field for all American cities in the CITY table with populations larger than 120000. The CountryCode for America is USA.
      SELECT NAME
          FROM CITY
          WHERE POPULATION > 120000
              AND COUNTRYCODE = 'USA';

  -- Query all attributes of every Japanese city in the CITY table. The COUNTRYCODE for Japan is JPN. The CITY table is described as follows:
      SELECT *
      FROM CITY
      WHERE COUNTRYCODE = 'JPN';

  -- Query the names of all the Japanese cities in the CITY table. The COUNTRYCODE for Japan is JPN.
      SELECT NAME 
      FROM CITY 
      WHERE COUNTRYCODE = 'JPN';


  -- Query a list of CITY and STATE from the STATION table.
      SELECT CITY, STATE
      FROM STATION;

  -- Query a list of CITY names from STATION for cities that have an even ID number. Print the results in any order, but exclude duplicates from the answer.
      SELECT DISTINCT CITY
      FROM STATION
      WHERE ID % 2 = 0;

  -- Weather Observation Station 4 
      SELECT (COUNT (CITY)) - (COUNT (DISTINCT CITY)) FROM STATION;

  -- Weather Observation Station 5
      SELECT CITY, len
      FROM (
      SELECT TOP 1 CITY, LEN(CITY) AS len FROM STATION
      WHERE LEN(CITY) =
      (SELECT MIN(LEN(CITY)) AS minlen
      FROM STATION)
      ORDER BY CITY
      ) AS minlen
      UNION ALL
      SELECT CITY, len
      FROM (
      SELECT TOP 1 CITY, LEN(CITY) AS len
      FROM STATION
      WHERE LEN(CITY) =
      (SELECT MAX(LEN(CITY)) AS maxlen
      FROM STATION)
      ORDER BY CITY
      ) AS maxlen;

  -- Weather Observation Station 6
      SELECT DISTINCT CITY 
      FROM STATION
      WHERE UPPER(CITY) LIKE 'A%'
          OR UPPER(CITY) LIKE 'E%'
          OR UPPER(CITY) LIKE 'I%'
          OR UPPER(CITY) LIKE 'O%'
          OR UPPER(CITY) LIKE 'U%';

  -- Weather Observation Station 7
      SELECT DISTINCT CITY
      FROM STATION
      WHERE UPPER(CITY) LIKE '%A'
          OR UPPER(CITY) LIKE '%E'
          OR UPPER(CITY) LIKE '%I'
          OR UPPER(CITY) LIKE '%O'
          OR UPPER(CITY) LIKE '%U';

  -- Weather Observation Station 8
      SELECT CITY
      FROM STATION
      WHERE 
      (UPPER(CITY) LIKE 'A%' OR UPPER(CITY) LIKE 'E%' OR UPPER(CITY) LIKE 'I%'
      OR UPPER(CITY) LIKE 'O%' OR UPPER(CITY) LIKE 'U%')
      AND
      (UPPER(CITY) LIKE '%A' OR UPPER(CITY) LIKE '%E' OR UPPER(CITY) LIKE '%I'
      OR UPPER(CITY) LIKE '%O' OR UPPER(CITY) LIKE '%U');

  -- Weather Observation Station 9
      SELECT DISTINCT CITY
      FROM STATION
      WHERE UPPER(CITY) NOT LIKE 'A%'
          AND UPPER(CITY) NOT LIKE 'E%'
          AND UPPER(CITY) NOT LIKE 'I%'
          AND UPPER(CITY) NOT LIKE 'O%'
          AND UPPER(CITY) NOT LIKE 'U%';

    -- Weather Observation Station 10
      SELECT DISTINCT CITY 
      FROM STATION
      WHERE UPPER(CITY) NOT LIKE '%A'
          AND UPPER(CITY) NOT LIKE '%E'
          AND UPPER(CITY) NOT LIKE '%I'
          AND UPPER(CITY) NOT LIKE '%O'
          AND UPPER(CITY) NOT LIKE '%U';


Basic Select

    -- Weather Observation Station 11
      SELECT DISTINCT CITY
      FROM STATION
      WHERE (SUBSTR(UPPER(CITY), 1, 1) NOT IN ('A', 'E', 'I', 'O', 'U'))
          OR (RIGHT(UPPER(CITY), 1) NOT IN ('A', 'E', 'I', 'O', 'U'));

    -- Weather Observation Station 12
      SELECT DISTINCT CITY
          FROM STATION
          WHERE (LEFT(UPPER(CITY), 1) NOT IN ('A', 'E', 'I', 'O', 'U'))
              AND (RIGHT(UPPER(CITY), 1) NOT IN ('A', 'E', 'I', 'O', 'U'));

    -- Higher Than 75 Marks
      SELECT Name 
      FROM STUDENTS 
          WHERE Marks > 75
          ORDER BY RIGHT(Name, 3), ID Asc;

    -- Employee Names
      SELECT name
          FROM Employee
            ORDER BY name;

    -- Employee Salary
      SELECT name
      FROM Employee
      WHERE salary > 2000
          AND months <10
      ORDER BY employee_id;







