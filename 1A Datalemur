-- Datalemur SQL Learning

-- Histogram of Tweets
  WITH twt_cnt AS (
  SELECT COUNT(tweet_id) AS tweet_bucket, user_id FROM tweets
  WHERE EXTRACT(YEAR FROM tweet_date) = 2022
  GROUP BY user_id
  )
  SELECT tweet_bucket, COUNT(DISTINCT user_id) AS user_id
  FROM twt_cnt
  GROUP BY tweet_bucket
  ORDER BY tweet_bucket;

-- LinkedIn SQL Interview Questions
  WITH Grades AS 
  (
  SELECT candidate_id
    , skill
    , CASE WHEN skill in ('Python', 'Tableau', 'PostgreSQL')
      THEN 1
      ELSE 0
      END AS valuable
    FROM candidates
  )
  SELECT candidate_id
    FROM Grades
    GROUP BY candidate_id
    HAVING SUM(valuable) >= 3;


-- Tesla SQL Interview Question
  SELECT part, assembly_step
  FROM parts_assembly
  WHERE finish_date IS NULL;

-- Facebook SQL Interview Questions
  SELECT DISTINCT p.page_id
  FROM pages AS p 
  LEFT JOIN page_likes AS l 
    ON p.page_id = l.page_id
    WHERE l.user_id IS NULL;


-- Laptop vs. Mobile Viewership 
  SELECT (
    SELECT COUNT(DISTINCT user_id) AS laptop_views
    FROM viewership
    WHERE device_type = 'laptop'
    ),
    (SELECT COUNT(DISTINCT user_id) AS mobile_views
    FROM viewership
    WHERE device_type != 'laptop'
    );

-- Average Post Hiatus (Part 1)
  SELECT user_id
  , MAX(post_date)::DATE - MIN(post_date)::DATE
  FROM posts
  WHERE EXTRACT(YEAR FROM post_date) = 2021
  GROUP BY user_id
  HAVING MAX(post_date)::DATE - MIN(post_date)::DATE > 0;


-- Teams Power Users
  SELECT sender_id, COUNT(DISTINCT message_id) AS message_count 
  FROM messages
  WHERE EXTRACT(MONTH FROM sent_date) = 8
    AND EXTRACT(YEAR FROM sent_date) = 2022
  GROUP BY sender_id
  ORDER BY COUNT(DISTINCT message_id) DESC
  LIMIT 2;

-- Duplicate Job Listing
  SELECT COUNT (DISTINCT company_id) AS duplicate_companies
  FROM 
  (
  SELECT company_id, title, description,
  COUNT(*) AS cnt 
  FROM job_listings
  GROUP BY company_id, title, description
  ) AS dist
  WHERE cnt > 1;


-- Cities with Completed Trades
  SELECT city, COUNT(DISTINCT order_id)
  FROM
  (
  SELECT t.user_id, t.order_id, u.city   
  FROM trades AS t 
    JOIN users AS u 
      ON t.user_id = u.user_id
  WHERE status = 'Completed'
  ) AS total 
  GROUP BY city
  ORDER BY count DESC
  LIMIT 3;


-- Average Review Ratings
  SELECT EXTRACT(MONTH FROM submit_date) AS mth, product_id AS product, ROUND(AVG(stars), 2)
  FROM reviews
  GROUP BY EXTRACT(MONTH FROM submit_date), product_id
  ORDER BY EXTRACT(MONTH FROM submit_date), product_id;



