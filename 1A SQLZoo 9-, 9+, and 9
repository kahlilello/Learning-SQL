SQL Zoo 9- and 9+

9- Window functions

# 1 Show the lastName, party and votes for the constituency 'S14000024' in 2017.
  SELECT lastName, party, votes
    FROM ge
  WHERE constituency = 'S14000024' AND yr = 2017
  ORDER BY votes DESC

# 2 Show the party and RANK for constituency S14000024 in 2017. List the output by party
  SELECT 
        party
      , votes
      , RANK() OVER (ORDER BY votes DESC) as posn
  FROM ge
  WHERE constituency = 'S14000024' AND yr = 2017
  ORDER BY party

# 3 Use PARTITION to show the ranking of each party in S14000021 in each year. Include yr, party, votes and ranking (the party with the most votes is 1).
  SELECT yr
      , party
      , votes
      , RANK() OVER (PARTITION BY yr ORDER BY votes DESC) as posn
  FROM ge
    WHERE constituency = 'S14000021'
    ORDER BY party,yr

# 4 Edinburgh constituencies are numbered S14000021 to S14000026. Use PARTITION BY constituency to show the ranking of each party in Edinburgh in 2017. Order your results so the winners are shown first, then ordered by constituency.
  SELECT constituency,party, votes
     , RANK() OVER(PARTITION BY constituency ORDER BY votes DESC)
  FROM ge
   WHERE constituency BETWEEN 'S14000021' AND 'S14000026'
   AND yr  = 2017
  ORDER BY RANK() OVER(PARTITION BY constituency ORDER BY votes DESC), constituency

# 5 You can use SELECT within SELECT to pick out only the winners in Edinburgh. Show the parties that won for each Edinburgh constituency in 2017.
  SELECT constituency, party
  FROM 
  (
  SELECT constituency,party, votes
    , RANK() OVER(PARTITION BY constituency ORDER BY votes DESC) AS rnk
    FROM ge
   WHERE constituency BETWEEN 'S14000021' AND 'S14000026'
     AND yr  = 2017
  ORDER BY constituency,votes DESC
  ) AS ge2
  WHERE rnk = 1

# 6 You can use COUNT and GROUP BY to see how each party did in Scotland. Scottish constituencies start with 'S'. Show how many seats for each party in Scotland in 2017.
  SELECT party, COUNT(constituency)
  FROM
  (
  SELECT party, constituency, votes
    , RANK() OVER(PARTITION BY constituency ORDER BY votes DESC) AS rnk
    FROM ge 
   WHERE constituency LIKE 'S%'
     AND yr  = 2017
  ORDER BY constituency
  ) AS results
  WHERE rnk = 1
  GROUP BY party



9+ Window LAG

# 1 The example uses a WHERE clause to show the cases in 'Italy' in March 2020. Modify the query to show data from Spain.
  SELECT name, DAY(whn),
     confirmed, deaths, recovered
     FROM covid
    WHERE name = 'Spain'
    AND MONTH(whn) = 3 AND YEAR(whn) = 2020
    ORDER BY whn

# 2 The LAG function is used to show data from the preceding row or the table. When lining up rows the data is partitioned by country name and ordered by the data whn. That means that only data from Italy is considered. Modify the query to show confirmed for the day before.
  SELECT name, DAY(whn), confirmed,
     LAG(confirmed, 1) OVER (PARTITION BY name ORDER BY whn)
   FROM covid
  WHERE name = 'Italy'
  AND MONTH(whn) = 3 AND YEAR(whn) = 2020
  ORDER BY whn

# 3 The number of confirmed case is cumulative - but we can use LAG to recover the number of new cases reported for each day. Show the number of new cases for each day, for Italy, for March.
  SELECT name, DAY(whn)
   , confirmed - LAG(confirmed, 1) OVER (PARTITION BY name ORDER BY whn) as new
  FROM covid
    WHERE name = 'Italy'
    AND MONTH(whn) = 3 AND YEAR(whn) = 2020
    ORDER BY whn
#4 The data gathered are necessarily estimates and are inaccurate. However by taking a longer time span we can mitigate some of the effects. You can filter the data to view only Monday's figures WHERE WEEKDAY(whn) = 0. Show the number of new cases in Italy for each week in 2020 - show Monday only.
  SELECT name, DATE_FORMAT(whn,'%Y-%m-%d'), 
   confirmed - LAG(confirmed, 1) OVER(PARTITION BY name ORDER BY whn) AS 'new this week'
   FROM covid
  WHERE name = 'Italy'
  AND WEEKDAY(whn) = 0 AND YEAR(whn) = 2020
  ORDER BY whn

# 5 You can JOIN a table using DATE arithmetic. This will give different results if data is missing. Show the number of new cases in Italy for each week - show Monday only. In the sample query we JOIN this week tw with last week lw using the DATE_ADD function.
  SELECT tw.name, DATE_FORMAT(tw.whn,'%Y-%m-%d'), 
   tw.confirmed - lw.confirmed
   FROM covid tw LEFT JOIN covid lw ON 
    DATE_ADD(lw.whn, INTERVAL 1 WEEK) = tw.whn
     AND tw.name=lw.name
  WHERE tw.name = 'Italy'
  AND WEEKDAY(tw.whn) = 0.
  ORDER BY tw.whn


# 6 This query shows the number of confirmed cases together with the world ranking for cases for the date '2020-04-20'. The number of COVID deaths is also shown. United States has the highest number, Spain is number 2... Notice that while Spain has the second highest confirmed cases, Italy has the second highest number of deaths due to the virus.
Add a column to show the ranking for the number of deaths due to COVID.
  SELECT 
     name,
     confirmed,
     RANK() OVER (ORDER BY confirmed DESC) rc,
     deaths
     , RANK() OVER(ORDER BY deaths DESC) rc
    FROM covid 
  WHERE whn = '2020-04-20'
  ORDER BY confirmed DESC


# 7 Show the infection rate ranking for each country. Only include countries with a population of at least 10 million.
 -- Bug. The query below is correct, SQL zoo keeps stating incorrect data. See other solutions for bug.
  SELECT 
     world.name,
     ROUND(100000*confirmed/population,2),
     RANK() OVER(ORDER BY ROUND(100000*confirmed/population,2)) AS rank
    FROM covid JOIN world ON covid.name=world.name
  WHERE whn = '2020-04-20' AND population > 10000000
  ORDER BY population DESC

# 8 For each country that has had at last 1000 new cases in a single day, show the date of the peak number of new cases.
  -- Bug, correct data but same as 7
   WITH newcases AS
    (
    SELECT 
           world.name
         , whn
         , confirmed
         , confirmed - LAG(confirmed, 1) OVER(PARTITION BY world.name ORDER      BY whn) AS newcases
        ,  population
      FROM covid JOIN world ON covid.name=world.name
      
    )
    , rnked AS 
    (
    SELECT name
         ,  DATE_FORMAT(whn,'%Y-%m-%d') AS whn
         ,  newcases
         ,  RANK() OVER(PARTITION BY name ORDER BY newcases DESC) AS rnk
         ,  population     
         FROM newcases
         WHERE newcases > 1000
    )
    SELECT name, whn, newcases AS peaknewcases 
    FROM rnked WHERE rnk = 1
    ORDER BY population DESC


9 Self Join

# 1 How many stops are in the database.
  SELECT COUNT(DISTINCT stop)
  FROM route

# 2 Find the id value for the stop 'Craiglockhart'
  SELECT id 
  FROM stops
  WHERE name = 'Craiglockhart'

# 3 Give the id and the name for the stops on the '4' 'LRT' service.







